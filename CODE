package main

import "fmt"

const NMAX int = 1024

type barber struct {
	nama    string
	tanggal [NMAX]int
	rating  int
	harga   int
}
type Arrint [NMAX]barber
type ArrNew [NMAX]barber
type Arrharga [NMAX]int

var x, nData int
var data Arrint
var dataHarga Arrharga

func main() {
	start()
}

func start() {
	fmt.Println("Siapa anda?", "\n1. Admin", "\n2. Customer")
	fmt.Scan(&x)
	if x == 1 {
		menuAdmin()
	} else if x == 2 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		start()
	}
}

func menuAdmin() {
	fmt.Println("1. Masukkan data", "\n0. Kembali ke menu")
	fmt.Scan(&x)
	if x == 0 {
		start()
	} else if x == 1 {
		fmt.Println("Berapa banyak barber yang akan diinput?")
		fmt.Scan(&nData)
		inputBarber(&data, &dataHarga, &nData)
		menuAdmin()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		menuAdmin()
	}
}

func menuCustomer() {
	var namaDicari string
	var low, high int
	var index Arrharga
	var ARange ArrNew
	fmt.Println("1. Lihat list barber", "\n2. Cari nama barber", "\n3. Cari berdasarkan range harga")
	fmt.Scan(&x)
	if x == 1 {
		fmt.Println("Berikut adalah list barber kami")
		cetakListBarber(data, dataHarga, nData)
	} else if x == 2 {
		cariNamaBarber(data, nData, namaDicari)
	} else if x == 3 {
		fmt.Println("Masukkan batas bawah dan batas atas harga:")
		fmt.Scan(&low, &high)
		sorting(&data, &dataHarga, nData) // Sort the array before finding the range
		count := findRange(dataHarga, low, high, nData, &index)
		fmt.Println("Data dalam rentang harga:")
		for i := 0; i < count; i++ {
			idx := index[i] // Use the index directly
			ARange[i].nama = data[idx].nama
			ARange[i].harga = data[idx].harga
			ARange[i].rating = data[idx].rating
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d\n", i+1, data[idx].nama, data[idx].harga, data[idx].rating)
		}
		bookingRange(ARange[:count], count)

	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		menuCustomer()
	}
}

func inputBarber(A *Arrint, Ah *Arrharga, n *int) {
	if *n > NMAX {
		*n = NMAX
	}
	var i, j, tanggal int
	fmt.Println("Masukkan nama, harga, dan rating barber")
	for i = 0; i < *n; i++ {
		fmt.Scan(&A[i].nama, &A[i].harga, &A[i].rating)
		Ah[i] = A[i].harga
		fmt.Println("Masukkan tanggal (masukkan 0 untuk berhenti):")
		j = 0
		for {
			fmt.Scan(&tanggal)
			if tanggal == 0 {
				break
			}
			if j < NMAX {
				A[i].tanggal[j] = tanggal
				j++
			} else {
				fmt.Println("Jumlah tanggal yang dimasukkan telah mencapai batas maksimal.")
				break
			}
		}
		if i < *n-1 {
			fmt.Println("Barber berikutnya")
		}
	}
}

func cetakListBarber(A Arrint, Ah Arrharga, n int) {
	var j, i, x int
	fmt.Println("1. Urutkan berdasarkan harga (murah-mahal)", "\n2. Urutkan berdasarkan rating", "\n3. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		sorting(&A, &Ah, n)
		for i = 0; i < n; i++ {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j = 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
		}
		booking(A[:n], n)
	} else if x == 2 {
		sortingRating(&A, n)
		for i = 0; i < n; i++ {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j := 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
		}
		booking(A[:n], n)
	} else if x == 3 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		cetakListBarber(A, Ah, n)
	}

}

func cariNamaBarber(A Arrint, n int, namaBarber string) {
	var found bool
	var i, j, cetak int
	var namaDicari string

	fmt.Println("Masukkan nama yang ingin anda cari")
	fmt.Scan(&namaDicari)
	namaBarber = namaDicari
	for i = 0; i < n; i++ {
		if A[i].nama == namaBarber {
			fmt.Printf("Nama: %s, Harga: %d, Rating: %d, Tanggal: ", A[i].nama, A[i].harga, A[i].rating)
			j = 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
			found = true
			cetak = i
			bookBarberdicari(A, n, namaBarber, cetak)

		}

	}

	if !found {
		fmt.Println("Barber dengan nama", namaBarber, "tidak ditemukan.")
		fmt.Println("silahkan cari lagi")
		cariNamaBarber(A, n, namaBarber)
	}

}

func bookBarberdicari(A Arrint, n int, namaBarber string, cetak int) {
	var i, j int
	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n2. Cari barber lagi", "\n3. kembali")
	fmt.Scan(&x)
	if x == 1 {
		fmt.Printf("Nama: %s, Harga: %d, Rating: %d, Tanggal: ", A[cetak].nama, A[cetak].harga, A[cetak].rating)
		j = 0
		for A[cetak].tanggal[j] != 0 && j < NMAX {
			fmt.Printf("%d ", A[i].tanggal[j])
			j++
		}
	} else if x == 2 {
		cariNamaBarber(A, n, namaBarber)
	} else if x == 3 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		bookBarberdicari(A, n, namaBarber, cetak)
	}
}

func booking(A []barber, n int) {
	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n2. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		bookOrnot(A, n)
	} else if x == 2 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		booking(A, n)
	}
}

func bookingRange(A []barber, n int) {
	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n2. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		bookOrnot(A, n)
	} else if x == 2 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		bookingRange(A, n)
	}
}

func bookOrnot(A []barber, n int) {
	var index, i int
	var ketemu bool
	fmt.Println("Pilih barber kamu : ")
	fmt.Scan(&index)
	ketemu = false
	i = 0
	if index > n || index < 1 {
		fmt.Println("Pilihan tidak valid silahkan pilih barber lagi")
		bookOrnot(A, n)
		return
	}
	for i < n && !ketemu {
		if index-1 == i {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j := 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
			ketemu = true
		}
		i++
	}
}

func sorting(A *Arrint, Ah *Arrharga, n int) {
	var i, j, minIdx int
	var temp int
	var tempBarber barber
	for i = 0; i < n-1; i++ {
		minIdx = i
		for j = i + 1; j < n; j++ {
			if Ah[j] < Ah[minIdx] {
				minIdx = j
			}
		}
		temp = Ah[i]
		Ah[i] = Ah[minIdx]
		Ah[minIdx] = temp
		tempBarber = A[i]
		A[i] = A[minIdx]
		A[minIdx] = tempBarber
	}
}

func sortingRating(A *Arrint, n int) {
	var i, j, minIdx int
	var tempBarber barber
	for i = 0; i < n-1; i++ {
		minIdx = i
		for j = i + 1; j < n; j++ {
			if A[j].rating > A[minIdx].rating { // Change to descending order
				minIdx = j
			}
		}
		tempBarber = A[i]
		A[i] = A[minIdx]
		A[minIdx] = tempBarber
	}
}

func findRange(Ah Arrharga, lower, upper, n int, indices *Arrharga) int {
	var i, count int
	count = 0
	for i = 0; i < n; i++ {
		if Ah[i] >= lower && Ah[i] <= upper {
			indices[count] = i // Use 0-based indexing
			count++
		}
	}
	return count
}


