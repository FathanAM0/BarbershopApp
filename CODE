package main

import "fmt"

const NMAX int = 1024

type barber struct {
	nama    string
	tanggal [NMAX]int
	rating  int
	harga   int
}
type Arrint [NMAX]barber
type Arrharga [NMAX]int

var x, nData int
var data Arrint
var dataHarga Arrharga

func main() {
	start()
}

func start() {
	fmt.Println("Siapa anda?", "\n1. Admin", "\n2. Customer")
	fmt.Scan(&x)
	if x == 1 {
		menuAdmin()
	} else if x == 2 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		start()
	}
}

func menuAdmin() {
	fmt.Println("1. Masukkan data", "\n0. Kembali ke menu")
	fmt.Scan(&x)
	if x == 0 {
		start()
	} else if x == 1 {
		fmt.Println("Berapa banyak barber yang akan diinput?")
		fmt.Scan(&nData)
		inputBarber(&data, &dataHarga, &nData)
		menuAdmin()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		menuAdmin()
	}
}

func menuCustomer() {
	var namaDicari string
	var low, high int
	var index Arrharga
	fmt.Println("1. Lihat list barber", "\n2. Cari nama barber", "\n3. Cari berdasarkan range harga")
	fmt.Scan(&x)
	if x == 1 {
		fmt.Println("Berikut adalah list barber kami")
		cetakListBarber(data, dataHarga, nData)
	} else if x == 2 {
		fmt.Println("Masukkan nama yang ingin anda cari")
		fmt.Scan(&namaDicari)
		cariNamaBarber(data, nData, namaDicari)
	} else if x == 3 {
		fmt.Println("Masukkan batas bawah dan batas atas harga:")
		fmt.Scan(&low, &high)
		sorting(&data, &dataHarga, nData) // Sort the array before finding the range
		count := findRange(dataHarga, low, high, nData, &index)
		fmt.Println("Data dalam rentang harga:")
		for i := 0; i < count; i++ {
			idx := index[i] // Use the index directly
			fmt.Printf("Nama: %s, Harga: %d, Rating: %d\n", data[idx].nama, data[idx].harga, data[idx].rating)
		}
		booking()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		menuCustomer()
	}
}

func inputBarber(A *Arrint, Ah *Arrharga, n *int) {
	if *n > NMAX {
		*n = NMAX
	}
	var i, j, tanggal int
	fmt.Println("Masukkan nama, harga, dan rating barber")
	for i = 0; i < *n; i++ {
		fmt.Scan(&A[i].nama, &A[i].harga, &A[i].rating)
		Ah[i] = A[i].harga
		fmt.Println("Masukkan tanggal (masukkan 0 untuk berhenti):")
		j = 0
		for {
			fmt.Scan(&tanggal)
			if tanggal == 0 {
				break
			}
			if j < NMAX {
				A[i].tanggal[j] = tanggal
				j++
			} else {
				fmt.Println("Jumlah tanggal yang dimasukkan telah mencapai batas maksimal.")
				break
			}
		}
		if i < *n-1 {
			fmt.Println("Barber berikutnya")
		}
	}
}

func cetakListBarber(A Arrint, Ah Arrharga, n int) {
	var i, x int
	fmt.Println("1. Urutkan berdasarkan harga (murah-mahal)", "\n2. Urutkan berdasarkan rating", "\n3. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		sorting(&A, &Ah, n)
		for i = 0; i < n; i++ {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j := 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
			fmt.Println(Ah[i])
		}
		booking()
	} else if x == 2 {
		sortingRating(&A, n)
		for i = 0; i < n; i++ {
			fmt.Printf("%d. Nama: %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			j := 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
			fmt.Println(Ah[i])
		}
		booking()
	} else if x == 3 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		cetakListBarber(A, Ah, n)
	}

	booking()
}

func cariNamaBarber(A Arrint, n int, namaBarber string) {
	var found bool
	for i := 0; i < n; i++ {
		if A[i].nama == namaBarber {
			fmt.Printf("Nama: %s, Harga: %d, Rating: %d, Tanggal: ", A[i].nama, A[i].harga, A[i].rating)
			j := 0
			for A[i].tanggal[j] != 0 && j < NMAX {
				fmt.Printf("%d ", A[i].tanggal[j])
				j++
			}
			fmt.Println()
			found = true
		}
	}
	if !found {
		fmt.Println("Barber dengan nama", namaBarber, "tidak ditemukan.")
	}
	booking()
}

func booking(A Arrint, n int) {
	var idxBooking, idxTanggal int
	var nTanggal int
	fmt.Println("Pilihlah pilihan dibawah")
	fmt.Println("1. Booking barber", "\n0. Kembali")
	fmt.Scan(&x)
	if x == 1 {
		for i := 0; i < n; i++ {
			fmt.Printf("%d. %s, Harga: %d, Rating: %d, Tanggal: ", i+1, A[i].nama, A[i].harga, A[i].rating)
			fmt.Println()
			fmt.Println("Tanggal: ")
			nTanggal = 0
			for j := 0; j < NMAX && A[i].tanggal[j] != 0; j++ {
				fmt.Printf("%d. %d ", j+1, A[i].tanggal[j])
				fmt.Println()
				nTanggal++
			}
			fmt.Println()
		}

		fmt.Println("Masukan nomor barber yang akan di booking: ")
		fmt.Scan(&idxBooking)
		fmt.Println("Masukan nomor tanggal yang akan di booking: ")
		fmt.Scan(&idxTanggal)

		idxTanggal = idxTanggal - 1 // dikurang 1, krn index array dimulai dari 0
		idxBooking = idxBooking - 1 // dikurang 1, krn index array dimulai dari 0

		if idxBooking >= 0 && idxBooking < n && idxTanggal >= 0 && idxTanggal < nTanggal && A[idxBooking].tanggal[idxTanggal] != 0 {
			fmt.Println("Resi Booking")
			fmt.Printf("Nama barber: %s, tanggal booking: %d\n", A[idxBooking].nama, A[idxBooking].tanggal[idxTanggal])
			hapusArray(&A, idxBooking, idxTanggal, nTanggal)
		} else {
			fmt.Println("Nomor barber atau tanggal tidak valid.")
		}
		menuCustomer()
	} else if x == 0 {
		menuCustomer()
	} else {
		fmt.Println("Masukan tidak valid, silahkan pilih kembali")
		booking(A, n)
	}
}
//fungsi hapus array masih belum dapet caranya, masih gagal terus
func sorting(A *Arrint, Ah *Arrharga, n int) {
	var i, j, minIdx int
	var temp int
	var tempBarber barber
	for i = 0; i < n-1; i++ {
		minIdx = i
		for j = i + 1; j < n; j++ {
			if Ah[j] < Ah[minIdx] {
				minIdx = j
			}
		}
		temp = Ah[i]
		Ah[i] = Ah[minIdx]
		Ah[minIdx] = temp
		tempBarber = A[i]
		A[i] = A[minIdx]
		A[minIdx] = tempBarber
	}
}

func sortingRating(A *Arrint, n int) {
	var i, j, minIdx int
	var tempBarber barber
	for i = 0; i < n-1; i++ {
		minIdx = i
		for j = i + 1; j < n; j++ {
			if A[j].rating < A[minIdx].rating {
				minIdx = j
			}
		}
		tempBarber = A[i]
		A[i] = A[minIdx]
		A[minIdx] = tempBarber
	}
}

func findRange(Ah Arrharga, lower, upper, n int, indices *Arrharga) int {
	count := 0
	for i := 0; i < n; i++ {
		if Ah[i] >= lower && Ah[i] <= upper {
			indices[count] = i // Use 0-based indexing
			count++
		}
	}
	return count
}
